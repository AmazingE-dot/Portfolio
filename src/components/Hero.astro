---
import "../styles/global.css";
---

<section
  id="inicio"
  class="min-h-screen flex items-center justify-center relative overflow-hidden bg-gradient-to-br from-primary-50 via-white to-secondary-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900"
>
  <canvas id="particles-canvas" class="absolute inset-0 w-full h-full"></canvas>

  <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center mt-12">
    <div class="fade-in-up">
      <div class="mb-8">
        <div
          class="w-40 h-40 mx-auto mb-6 rounded-full bg-gradient-to-r from-primary-500 to-secondary-500 p-1 floating-animation"
        >
          <img src="/IlustracionPeque.webp" alt="" />
        </div>
      </div>

      <!-- Main heading -->
      <h1 class="text-4xl md:text-6xl lg:text-7xl font-bold mb-6">
        <span data-i18n="hero-greeting" class="block text-gray-900 dark:text-white">Hola, soy</span>
        <span class="block gradient-text">Eduardo León</span>
      </h1>

      <!-- Dynamic typewriter text -->
      <div
        class="text-xl md:text-2xl lg:text-3xl text-gray-600 dark:text-gray-300 mb-8 h-12"
      >
        <span id="typewriter-text" class="border-r-2 border-primary-500"></span>
      </div>

      <!-- Description -->
      <p
        class="text-lg md:text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto mb-10 leading-relaxed" data-i18n="hero-description"
      >
        Ingeniero de Sistemas con 3 años de experiencia en desarrollo full
        stack.<br />
        Desarrollo soluciones que ofrecen una excelente experiencia al usuario.<br
        />
        Desarrollador de Arquímedes, agente de IA ganador en la II Jornada IA del
        Minuto de Dios.
      </p>

      <div class="flex flex-col sm:flex-row gap-4 justify-center">
        <a
          href="#proyectos" data-i18n="hero-btn-projects"
          class="inline-flex items-center px-8 py-3 bg-gradient-to-r from-primary-500 to-primary-600 text-white font-semibold rounded-lg shadow-lg hover:from-primary-600 hover:to-primary-700 transform hover:scale-105 transition-all duration-200"
        >
          Ver Proyectos
          <svg
            class="w-5 h-5 ml-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
          </svg>
        </a>
      </div>

      <div class="flex justify-center space-x-6 mt-10">
        <a
          target="_blank"
          href="https://www.linkedin.com/in/carlos-eduardo-le%C3%B3n-bedoya-583483281/"
          class="text-gray-600 dark:text-gray-400 hover:text-primary-500 dark:hover:text-primary-400 transform hover:scale-110 transition-all duration-200"
        >
          <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
            <path
              d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"
            ></path>
          </svg>
        </a>
        <a
          target="_blank"
          href="https://github.com/AmazingE-dot"
          class="text-gray-600 dark:text-gray-400 hover:text-primary-500 dark:hover:text-primary-400 transform hover:scale-110 transition-all duration-200"
        >
          <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
            <path
              d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.30.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"
            ></path>
          </svg>
        </a>
      </div>
    </div>
  </div>

  <!-- Scroll indicator -->
  <div
    class="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce"
  >
    <svg
      class="w-6 h-6 text-gray-400"
      fill="none"
      stroke="currentColor"
      viewBox="0 0 24 24"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
    </svg>
  </div>
</section>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const typewriterElement = document.getElementById("typewriter-text");

    if (!typewriterElement) {
      console.warn("Elemento typewriter no encontrado");
      return;
    }

    // Textos por defecto (fallback)
    const defaultTexts = [
      "Desarrollador Full Stack Expert Certified",
      "UI/UX Expert",
      "Ingeniero de Sistemas",
    ];

    let currentTexts = defaultTexts;
    let textIndex = 0;
    let charIndex = 0;
    let isDeleting = false;
    let typewriterTimeout: string | number | NodeJS.Timeout | undefined;

    // Función para obtener los textos actuales
    function getCurrentTexts() {
      return window.typewriterTexts && window.typewriterTexts.length > 0 
        ? window.typewriterTexts 
        : defaultTexts;
    }

    // Función principal del typewriter
    function typeWriter() {
      currentTexts = getCurrentTexts();
      const currentText = currentTexts[textIndex];

      if (isDeleting) {
        if (typewriterElement) {
          typewriterElement.textContent = currentText.substring(0, charIndex - 1);
        }
        charIndex--;
      } else {
        if (typewriterElement) {
          typewriterElement.textContent = currentText.substring(0, charIndex + 1);
        }
        charIndex++;
      }

      let typeSpeed = isDeleting ? 50 : 100;

      if (!isDeleting && charIndex === currentText.length) {
        typeSpeed = 2000;
        isDeleting = true;
      } else if (isDeleting && charIndex === 0) {
        isDeleting = false;
        textIndex = (textIndex + 1) % currentTexts.length;
        typeSpeed = 200;
      }

      typewriterTimeout = setTimeout(typeWriter, typeSpeed);
    }

    // Función para reiniciar el typewriter
    function restartTypewriter() {
      // Limpiar timeout existente
      if (typewriterTimeout) {
        clearTimeout(typewriterTimeout);
      }

      // Resetear variables
      currentTexts = getCurrentTexts();
      textIndex = 0;
      charIndex = 0;
      isDeleting = false;
      if (typewriterElement) {
        typewriterElement.textContent = "";
      }

      // Iniciar nuevamente con un pequeño delay
      setTimeout(() => {
        typeWriter();
      }, 300);
    }

    // Función global para actualizar typewriter (accesible desde LanguageToggle)
    window.updateTypewriter = restartTypewriter;

    // Escuchar cambios de idioma
    window.addEventListener('languageChanged', (event) => {
      restartTypewriter();
    });

    // Inicializar el typewriter
    setTimeout(() => {
      currentTexts = getCurrentTexts();
      typeWriter();
    }, 1000);

    // === PARTICLES ANIMATION (sin cambios) ===
    const canvas = document.getElementById("particles-canvas") as HTMLCanvasElement;
    if (!canvas) return;

    const ctx = canvas.getContext("2d");
    if (!ctx) return;

    let particles: Array<{
      x: number;
      y: number;
      dx: number;
      dy: number;
      size: number;
      opacity: number;
    }> = [];

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }

    function createParticles() {
      particles = [];
      for (let i = 0; i < 50; i++) {
        particles.push({
          x: Math.random() * canvas.width,
          y: Math.random() * canvas.height,
          dx: (Math.random() - 0.5) * 2,
          dy: (Math.random() - 0.5) * 2,
          size: Math.random() * 3 + 1,
          opacity: Math.random() * 0.5 + 0.1,
        });
      }
    }

    function animateParticles() {
      if (!ctx) return;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      particles.forEach((particle) => {
        particle.x += particle.dx;
        particle.y += particle.dy;

        if (particle.x < 0 || particle.x > canvas.width) particle.dx *= -1;
        if (particle.y < 0 || particle.y > canvas.height) particle.dy *= -1;

        ctx.beginPath();
        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
        ctx.fillStyle = `rgba(59, 130, 246, ${particle.opacity})`;
        ctx.fill();
      });

      requestAnimationFrame(animateParticles);
    }

    resizeCanvas();
    createParticles();
    animateParticles();

    window.addEventListener("resize", () => {
      resizeCanvas();
      createParticles();
    });
  });
</script>
